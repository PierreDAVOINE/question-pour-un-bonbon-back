{
    "openapi": "3.0.2",
    "info": {
        "title": "Question pour un bonbon - API",
        "version": "1.0",
        "description": "This is the API for my personnal project 'Question pour un bonbon'.\n\nThis project is a quiz game where you can play with your friends and win candies.\n\nYou can find the project on [GitHub]("
    },
    "servers": [
        {
            "url": "http://localhost:3000"
        }
    ],
    "components": {
        "schemas": {
            "userLogin": {
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    }
                }
            },
            "userRegister": {
                "properties": {
                    "firstname": {
                        "type": "string"
                    },
                    "lastname": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    }
                }
            },
            "userUpdate": {
                "properties": {
                    "field": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                }
            }
        }
    },
    "paths": {
        "/user/login": {
            "post": {
                "tags": [
                    "User"
                ],
                "description": "Allow user to get login.",
                "requestBody": {
                    "description": "User's login",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/userLogin"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User is logged in."
                    },
                    "401": {
                        "description": "Incorrect credentials."
                    },
                    "404": {
                        "description": "Incorrect credentials."
                    },
                    "500": {
                        "description": "Server encountered a problem."
                    }
                }
            }
        },
        "/user/signup": {
            "post": {
                "tags": [
                    "User"
                ],
                "description": "Allow user to register.",
                "parameters": [],
                "requestBody": {
                    "description": "User's register datas",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/userRegister"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User is registered."
                    },
                    "401": {
                        "description": "Email already use."
                    },
                    "500": {
                        "description": "Server encountered a problem."
                    }
                }
            }
        },
        "/user/:userId": {
            "patch": {
                "tags": [
                    "User"
                ],
                "description": "Allow user to update his account.",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The field to update and the value",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/userUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User data updated."
                    },
                    "404": {
                        "description": "User not found."
                    },
                    "500": {
                        "description": "Server encountered a problem."
                    }
                }
            },
            "delete": {
                "tags": [
                    "User"
                ],
                "description": "Allow user to delete his account.",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User account deleted."
                    },
                    "404": {
                        "description": "User not found."
                    },
                    "500": {
                        "description": "Server encountered a problem."
                    }
                }
            }
        },
        "/quiz": {
            "get": {
                "tags": [
                    "Quiz"
                ],
                "description": "Get a list of all quiz with short descriptions.",
                "responses": {
                    "200": {
                        "description": "Here the quiz list."
                    },
                    "404": {
                        "description": "No quiz found."
                    },
                    "500": {
                        "description": "Server encountered a problem."
                    }
                }
            }
        },
        "/quiz/:quizId": {
            "get": {
                "tags": [
                    "Quiz"
                ],
                "description": "Get a quiz with this questions and answers through is user id.",
                "responses": {
                    "200": {
                        "description": "Here the quiz list."
                    },
                    "404": {
                        "description": "No quiz found."
                    },
                    "500": {
                        "description": "Server encountered a problem."
                    }
                }
            }
        }
    }
}